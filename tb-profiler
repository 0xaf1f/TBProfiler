#! /usr/bin/python
from __future__ import division
import sys
import os.path
from tbprofiler import tbp_main
import argparse

script_dir = os.path.dirname(os.path.realpath(__file__))
file_json = "%s/conf.json" % script_dir

def main_profile(args):
    inst = tbp_main.tbp_seq_obj(file_json,args.prefix,fq1=args.read1,fq2=args.read2,bam=args.bam,platform=args.platform,threads=args.threads,verbose=args.verbose,stor_dir=args.dir)
    inst.run_profiler()

def main_collate(args):
    pass

def main_version(args):
    pass

if __name__=="__main__":
    parser = argparse.ArgumentParser(description='TBProfiler pipeline',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparsers = parser.add_subparsers(help="Task to perform")

    parser_sub = subparsers.add_parser('profile', help='Run whole pipeline', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub.add_argument('--platform','-m',choices=["Illumina","minION"],default="Illumina",help='NGS Platform')
    parser_sub.add_argument('--read1','-1',help='First read file')
    parser_sub.add_argument('--read2','-2',help='Second read file')
    parser_sub.add_argument('--bam','-a',help='Second read file')
    parser_sub.add_argument('--prefix','-p',default="tbprofiler",help='Sample prefix')
    parser_sub.add_argument('--threads','-t',default=1,help='Threads',type=int)
    parser_sub.add_argument('--dir','-d',default=".",help='Storage directory')
    parser_sub.add_argument('--db','-b',help='Full path to mutation database json file to use (default: TBProfiler panel)')
    parser_sub.add_argument('--format','-f',default="classic",help='Output format [classic,new]')
    parser_sub.add_argument('--verbose','-v',default=0, choices=[0,1,2],help="Verbosity increases from 0 to 2",type=int)
    parser_sub.set_defaults(func=main_profile)


    parser_sub = subparsers.add_parser('collate', help='Collate results form multiple samples together', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub.add_argument('samples_file',help='File with samples (one per line)')
    parser_sub.add_argument('out_file',help='Output file name')
    parser_sub.add_argument('--dir','-d',default=".",help='Storage directory')
    parser_sub.add_argument('--itol',help='Generate ITOL file',action="store_true")
    parser_sub.set_defaults(func=main_collate)


    parser_sub = subparsers.add_parser('version', help='Output program version and exit', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub.set_defaults(func=main_version)



    args = parser.parse_args()
    args.func(args)
